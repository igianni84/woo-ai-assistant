#!/bin/bash

# Pre-commit Hook for Woo AI Assistant
#
# This hook runs before each commit to ensure code quality standards.
# It performs quick quality checks on staged files only.
#
# @package WooAiAssistant
# @subpackage Git Hooks
# @since 1.0.0
# @author Claude Code Assistant

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Configuration
readonly PROJECT_ROOT="$(git rev-parse --show-toplevel)"
readonly STAGED_PHP_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$' || true)
readonly STAGED_JS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx)$' | grep -v node_modules || true)

log() {
    echo -e "${BLUE}[pre-commit]${NC} $*"
}

success() {
    echo -e "${GREEN}✅ $*${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $*${NC}"
}

error() {
    echo -e "${RED}❌ $*${NC}" >&2
}

# =============================================================================
# MAIN CHECKS
# =============================================================================

check_php_syntax() {
    if [[ -z "$STAGED_PHP_FILES" ]]; then
        return 0
    fi

    log "Checking PHP syntax..."
    
    local has_errors=false
    
    while IFS= read -r file; do
        if [[ -f "$file" ]]; then
            if ! php -l "$file" > /dev/null 2>&1; then
                error "PHP syntax error in: $file"
                has_errors=true
            fi
        fi
    done <<< "$STAGED_PHP_FILES"
    
    if [[ "$has_errors" == "true" ]]; then
        error "PHP syntax errors found. Fix them before committing."
        return 1
    fi
    
    success "PHP syntax check passed"
    return 0
}

check_php_standards() {
    if [[ -z "$STAGED_PHP_FILES" ]]; then
        return 0
    fi

    log "Checking PHP coding standards..."
    
    cd "$PROJECT_ROOT"
    
    # Create temporary file with staged PHP files
    local temp_file_list
    temp_file_list=$(mktemp)
    echo "$STAGED_PHP_FILES" > "$temp_file_list"
    
    # Run phpcs on staged files only
    if ! vendor/bin/phpcs --standard=PSR12 --file-list="$temp_file_list" 2>/dev/null; then
        rm -f "$temp_file_list"
        warning "PHP coding standards violations found."
        echo ""
        echo "💡 To auto-fix most issues, run:"
        echo "   composer run phpcbf"
        echo ""
        echo "Or commit with --no-verify to skip this check (not recommended)"
        return 1
    fi
    
    rm -f "$temp_file_list"
    success "PHP coding standards check passed"
    return 0
}

check_javascript_standards() {
    if [[ -z "$STAGED_JS_FILES" ]]; then
        return 0
    fi

    log "Checking JavaScript standards..."
    
    cd "$PROJECT_ROOT"
    
    # Run ESLint on staged JS files only
    local js_files_array
    mapfile -t js_files_array <<< "$STAGED_JS_FILES"
    
    if ! npm run lint -- "${js_files_array[@]}" 2>/dev/null; then
        warning "JavaScript/ESLint violations found."
        echo ""
        echo "💡 To auto-fix most issues, run:"
        echo "   npm run lint:fix"
        echo ""
        echo "Or commit with --no-verify to skip this check (not recommended)"
        return 1
    fi
    
    success "JavaScript standards check passed"
    return 0
}

check_commit_message() {
    # This will be called by commit-msg hook, not here
    return 0
}

check_file_permissions() {
    log "Checking file permissions..."
    
    local has_errors=false
    
    # Check for executable PHP files (should not be executable)
    while IFS= read -r file; do
        if [[ -f "$file" && -x "$file" ]]; then
            error "PHP file should not be executable: $file"
            has_errors=true
        fi
    done <<< "$STAGED_PHP_FILES"
    
    if [[ "$has_errors" == "true" ]]; then
        error "File permission issues found. Fix them before committing."
        echo "💡 To fix: chmod -x filename.php"
        return 1
    fi
    
    success "File permissions check passed"
    return 0
}

check_for_sensitive_data() {
    log "Checking for sensitive data..."
    
    local staged_files
    staged_files=$(git diff --cached --name-only --diff-filter=ACM)
    
    if [[ -z "$staged_files" ]]; then
        return 0
    fi
    
    local has_sensitive=false
    
    # Check each staged file for sensitive patterns
    while IFS= read -r file; do
        if [[ -f "$file" ]]; then
            # Check for common sensitive patterns
            if git show ":$file" | grep -q "sk_live_\|sk_test_.*live\|password.*=.*[^x]\{8,\}\|api_key.*=.*[a-zA-Z0-9]\{10,\}"; then
                error "Potential sensitive data found in: $file"
                has_sensitive=true
            fi
        fi
    done <<< "$staged_files"
    
    if [[ "$has_sensitive" == "true" ]]; then
        error "Sensitive data detected. Remove it before committing."
        return 1
    fi
    
    success "Sensitive data check passed"
    return 0
}

run_quick_tests() {
    log "Running quick tests..."
    
    cd "$PROJECT_ROOT"
    
    # Run quick PHP tests if PHP files are staged
    if [[ -n "$STAGED_PHP_FILES" ]]; then
        if [[ -f "vendor/bin/phpunit" ]]; then
            if ! composer run test-simple > /dev/null 2>&1; then
                warning "Some PHP tests are failing."
                echo ""
                echo "💡 To see details, run:"
                echo "   composer run test"
                echo ""
                echo "Or commit with --no-verify to skip this check (not recommended)"
                return 1
            fi
        fi
    fi
    
    # Run quick JS tests if JS files are staged
    if [[ -n "$STAGED_JS_FILES" ]]; then
        if [[ -f "package.json" ]] && npm list jest > /dev/null 2>&1; then
            if ! npm test -- --passWithNoTests --silent > /dev/null 2>&1; then
                warning "Some JavaScript tests are failing."
                echo ""
                echo "💡 To see details, run:"
                echo "   npm test"
                echo ""
                echo "Or commit with --no-verify to skip this check (not recommended)"
                return 1
            fi
        fi
    fi
    
    success "Quick tests passed"
    return 0
}

# =============================================================================
# MAIN EXECUTION
# =============================================================================

main() {
    local start_time
    start_time=$(date +%s)
    
    log "Running pre-commit checks..."
    
    # Check if there are any staged files
    if ! git diff --cached --quiet; then
        # Run all checks
        check_php_syntax || exit 1
        check_php_standards || exit 1
        check_javascript_standards || exit 1
        check_file_permissions || exit 1
        check_for_sensitive_data || exit 1
        run_quick_tests || exit 1
        
        local end_time
        end_time=$(date +%s)
        local duration=$((end_time - start_time))
        
        success "All pre-commit checks passed! (${duration}s)"
    else
        warning "No staged changes found."
    fi
}

# Run main function
main "$@"