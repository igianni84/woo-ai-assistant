# Docker Development Environment for Woo AI Assistant
# Alternative to MAMP for cross-platform development

version: '3.8'

services:
  # WordPress with WooCommerce
  wordpress:
    image: wordpress:6-php8.2-apache
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress_password
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_DEBUG: 1
      WORDPRESS_CONFIG_EXTRA: |
        # Debug settings
        define('WP_DEBUG_LOG', true);
        define('WP_DEBUG_DISPLAY', false);
        define('SCRIPT_DEBUG', true);
        
        # Plugin constants
        define('WOO_AI_ASSISTANT_DEBUG', true);
        define('WOO_AI_ASSISTANT_USE_DUMMY_DATA', true);
        define('WOO_AI_ASSISTANT_API_URL', 'http://localhost:3000');
        
        # Performance monitoring
        define('SAVEQUERIES', true);
        define('WP_MEMORY_LIMIT', '256M');
    volumes:
      - wordpress_data:/var/www/html
      - ./:/var/www/html/wp-content/plugins/woo-ai-assistant
      # Performance monitoring logs
      - ./logs/wordpress:/var/log/wordpress
    depends_on:
      - db
    networks:
      - woo-ai-network

  # MySQL Database
  db:
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress_password
      MYSQL_ROOT_PASSWORD: rootpassword
      # Performance tuning
      MYSQL_INNODB_BUFFER_POOL_SIZE: 256M
      MYSQL_INNODB_LOG_FILE_SIZE: 64M
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql/conf.d:/etc/mysql/conf.d
      # Performance monitoring
      - ./logs/mysql:/var/log/mysql
    ports:
      - "3306:3306"
    networks:
      - woo-ai-network

  # phpMyAdmin for database management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PMA_HOST: db
      PMA_USER: wordpress
      PMA_PASSWORD: wordpress_password
    depends_on:
      - db
    networks:
      - woo-ai-network

  # Node.js for React development
  node:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./:/app
    command: >
      sh -c "
        npm install &&
        npm run watch
      "
    ports:
      - "3000:3000"
      - "3001:3001"
    networks:
      - woo-ai-network

  # Performance monitoring with Grafana
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - woo-ai-network

  # InfluxDB for performance metrics
  influxdb:
    image: influxdb:2.7-alpine
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: admin123456
      DOCKER_INFLUXDB_INIT_ORG: woo-ai-assistant
      DOCKER_INFLUXDB_INIT_BUCKET: performance
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - woo-ai-network

  # Redis for caching (performance optimization)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - woo-ai-network

volumes:
  wordpress_data:
  db_data:
  grafana_data:
  influxdb_data:
  redis_data:

networks:
  woo-ai-network:
    driver: bridge