# Code Coverage Reporting Workflow for Woo AI Assistant
#
# Comprehensive code coverage analysis and reporting for both PHP and JavaScript.
# Generates coverage reports and tracks coverage metrics over time.
#
# @package WooAiAssistant
# @subpackage CI/CD Coverage
# @since 1.0.0
# @author Claude Code Assistant

name: 📊 Code Coverage Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly coverage analysis on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      coverage_type:
        description: 'Type of coverage analysis to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - php-only
          - javascript-only
      generate_badge:
        description: 'Generate coverage badge'
        required: false
        default: true
        type: boolean
      upload_codecov:
        description: 'Upload to Codecov'
        required: false
        default: true
        type: boolean

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  MIN_COVERAGE_THRESHOLD: 80
  TARGET_COVERAGE: 90

concurrency:
  group: coverage-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==============================================================================
  # PHP CODE COVERAGE
  # ==============================================================================
  php-coverage:
    name: 🔧 PHP Code Coverage
    runs-on: ubuntu-latest
    if: github.event.inputs.coverage_type == 'php-only' || github.event.inputs.coverage_type == 'full' || github.event.inputs.coverage_type == ''
    timeout-minutes: 20

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    outputs:
      php-coverage: ${{ steps.coverage-analysis.outputs.coverage_percentage }}
      php-lines-covered: ${{ steps.coverage-analysis.outputs.lines_covered }}
      php-lines-total: ${{ steps.coverage-analysis.outputs.lines_total }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup PHP with Xdebug
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, mysqli, pdo_mysql, bcmath, soap, intl, gd, exif, iconv, xdebug
          coverage: xdebug
          tools: composer:v2

      - name: 🗃️ Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/composer
          key: ${{ runner.os }}-composer-coverage-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: 📦 Install PHP dependencies
        run: composer install --prefer-dist --no-progress --optimize-autoloader

      - name: 🌐 Setup WordPress test environment
        run: |
          if [ -f "scripts/docker-setup.sh" ]; then
            bash scripts/docker-setup.sh --test-only
          else
            # Fallback setup
            bash bin/install-wp-tests.sh wordpress_test root root localhost latest || true
          fi

      - name: 🧪 Run PHPUnit with coverage
        run: |
          echo "🧪 Running PHPUnit with coverage analysis..."
          
          # Run tests with coverage
          composer run test:coverage
          
          # Verify coverage files were generated
          if [ ! -f "coverage/clover.xml" ]; then
            echo "❌ Coverage file not generated"
            exit 1
          fi
          
          echo "✅ PHP coverage analysis completed"

      - name: 📊 Analyze PHP coverage
        id: coverage-analysis
        run: |
          echo "📊 Analyzing PHP coverage results..."
          
          # Extract coverage percentage from clover.xml
          if [ -f "coverage/clover.xml" ]; then
            # Calculate coverage percentage
            lines_covered=$(php -r "
              \$xml = simplexml_load_file('coverage/clover.xml');
              \$metrics = \$xml->xpath('//metrics[@files]')[0];
              echo \$metrics['coveredstatements'];
            ")
            
            lines_total=$(php -r "
              \$xml = simplexml_load_file('coverage/clover.xml');
              \$metrics = \$xml->xpath('//metrics[@files]')[0];
              echo \$metrics['statements'];
            ")
            
            if [ "$lines_total" -gt 0 ]; then
              coverage_percentage=$(php -r "echo round(($lines_covered / $lines_total) * 100, 2);")
            else
              coverage_percentage="0"
            fi
            
            echo "coverage_percentage=$coverage_percentage" >> $GITHUB_OUTPUT
            echo "lines_covered=$lines_covered" >> $GITHUB_OUTPUT
            echo "lines_total=$lines_total" >> $GITHUB_OUTPUT
            
            echo "📊 PHP Coverage: $coverage_percentage% ($lines_covered/$lines_total lines)"
            
            # Check coverage threshold
            if (( $(echo "$coverage_percentage < $MIN_COVERAGE_THRESHOLD" | bc -l) )); then
              echo "⚠️ Coverage is below minimum threshold of $MIN_COVERAGE_THRESHOLD%"
            else
              echo "✅ Coverage meets minimum threshold"
            fi
          else
            echo "❌ Coverage file not found"
            exit 1
          fi

      - name: 📈 Generate PHP coverage report
        run: |
          echo "📈 Generating detailed PHP coverage report..."
          
          # Generate HTML coverage report
          composer run test:coverage
          
          # Generate coverage summary
          cat > coverage-summary-php.md << EOF
          # PHP Code Coverage Report
          
          **Coverage:** ${{ steps.coverage-analysis.outputs.coverage_percentage }}%  
          **Lines Covered:** ${{ steps.coverage-analysis.outputs.lines_covered }}  
          **Total Lines:** ${{ steps.coverage-analysis.outputs.lines_total }}  
          **Threshold:** ${{ env.MIN_COVERAGE_THRESHOLD }}%  
          **Target:** ${{ env.TARGET_COVERAGE }}%  
          
          $(date '+**Generated:** %Y-%m-%d %H:%M:%S UTC')
          EOF

      - name: 📤 Upload PHP coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: php-coverage-report
          path: |
            coverage/
            coverage-summary-php.md
          retention-days: 30

  # ==============================================================================
  # JAVASCRIPT CODE COVERAGE
  # ==============================================================================
  javascript-coverage:
    name: ⚛️ JavaScript Code Coverage
    runs-on: ubuntu-latest
    if: github.event.inputs.coverage_type == 'javascript-only' || github.event.inputs.coverage_type == 'full' || github.event.inputs.coverage_type == ''
    timeout-minutes: 15

    outputs:
      js-coverage: ${{ steps.coverage-analysis.outputs.coverage_percentage }}
      js-lines-covered: ${{ steps.coverage-analysis.outputs.lines_covered }}
      js-lines-total: ${{ steps.coverage-analysis.outputs.lines_total }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Node.js dependencies
        run: npm ci

      - name: 🧪 Run Jest with coverage
        run: |
          echo "🧪 Running Jest with coverage analysis..."
          
          # Run tests with coverage
          npm run test:coverage
          
          # Verify coverage files were generated
          if [ ! -f "coverage/lcov.info" ]; then
            echo "❌ Coverage file not generated"
            exit 1
          fi
          
          echo "✅ JavaScript coverage analysis completed"

      - name: 📊 Analyze JavaScript coverage
        id: coverage-analysis
        run: |
          echo "📊 Analyzing JavaScript coverage results..."
          
          # Extract coverage from lcov.info or coverage-summary.json
          if [ -f "coverage/coverage-summary.json" ]; then
            coverage_percentage=$(node -e "
              const summary = require('./coverage/coverage-summary.json');
              const total = summary.total;
              console.log(total.statements.pct || 0);
            ")
            
            lines_covered=$(node -e "
              const summary = require('./coverage/coverage-summary.json');
              const total = summary.total;
              console.log(total.statements.covered || 0);
            ")
            
            lines_total=$(node -e "
              const summary = require('./coverage/coverage-summary.json');
              const total = summary.total;
              console.log(total.statements.total || 0);
            ")
          else
            # Fallback: parse from text output
            coverage_percentage="0"
            lines_covered="0"
            lines_total="0"
          fi
          
          echo "coverage_percentage=$coverage_percentage" >> $GITHUB_OUTPUT
          echo "lines_covered=$lines_covered" >> $GITHUB_OUTPUT
          echo "lines_total=$lines_total" >> $GITHUB_OUTPUT
          
          echo "📊 JavaScript Coverage: $coverage_percentage% ($lines_covered/$lines_total statements)"
          
          # Check coverage threshold
          if (( $(echo "$coverage_percentage < $MIN_COVERAGE_THRESHOLD" | bc -l) )); then
            echo "⚠️ Coverage is below minimum threshold of $MIN_COVERAGE_THRESHOLD%"
          else
            echo "✅ Coverage meets minimum threshold"
          fi

      - name: 📈 Generate JavaScript coverage report
        run: |
          echo "📈 Generating detailed JavaScript coverage report..."
          
          # Generate coverage summary
          cat > coverage-summary-js.md << EOF
          # JavaScript Code Coverage Report
          
          **Coverage:** ${{ steps.coverage-analysis.outputs.coverage_percentage }}%  
          **Statements Covered:** ${{ steps.coverage-analysis.outputs.lines_covered }}  
          **Total Statements:** ${{ steps.coverage-analysis.outputs.lines_total }}  
          **Threshold:** ${{ env.MIN_COVERAGE_THRESHOLD }}%  
          **Target:** ${{ env.TARGET_COVERAGE }}%  
          
          $(date '+**Generated:** %Y-%m-%d %H:%M:%S UTC')
          EOF

      - name: 📤 Upload JavaScript coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: javascript-coverage-report
          path: |
            coverage/
            coverage-summary-js.md
          retention-days: 30

  # ==============================================================================
  # COVERAGE REPORTING AND UPLOAD
  # ==============================================================================
  coverage-reporting:
    name: 📊 Coverage Reporting
    runs-on: ubuntu-latest
    needs: [php-coverage, javascript-coverage]
    if: always() && (success() || failure())
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download coverage artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./coverage-artifacts

      - name: 📊 Combine coverage reports
        run: |
          echo "📊 Combining coverage reports..."
          
          # Get coverage values (with fallbacks)
          PHP_COVERAGE="${{ needs.php-coverage.outputs.php-coverage || '0' }}"
          JS_COVERAGE="${{ needs.javascript-coverage.outputs.js-coverage || '0' }}"
          
          PHP_LINES_COVERED="${{ needs.php-coverage.outputs.php-lines-covered || '0' }}"
          PHP_LINES_TOTAL="${{ needs.php-coverage.outputs.php-lines-total || '0' }}"
          JS_LINES_COVERED="${{ needs.javascript-coverage.outputs.js-lines-covered || '0' }}"
          JS_LINES_TOTAL="${{ needs.javascript-coverage.outputs.js-lines-total || '0' }}"
          
          # Calculate overall coverage
          TOTAL_LINES_COVERED=$((PHP_LINES_COVERED + JS_LINES_COVERED))
          TOTAL_LINES=$((PHP_LINES_TOTAL + JS_LINES_TOTAL))
          
          if [ "$TOTAL_LINES" -gt 0 ]; then
            OVERALL_COVERAGE=$(echo "scale=2; ($TOTAL_LINES_COVERED * 100) / $TOTAL_LINES" | bc)
          else
            OVERALL_COVERAGE="0"
          fi
          
          # Create combined report
          cat > combined-coverage-report.md << EOF
          # 📊 Combined Code Coverage Report
          
          ## Summary
          - **Overall Coverage:** ${OVERALL_COVERAGE}%
          - **PHP Coverage:** ${PHP_COVERAGE}%
          - **JavaScript Coverage:** ${JS_COVERAGE}%
          - **Minimum Threshold:** ${{ env.MIN_COVERAGE_THRESHOLD }}%
          - **Target Coverage:** ${{ env.TARGET_COVERAGE }}%
          
          ## Details
          | Component | Coverage | Lines Covered | Total Lines |
          |-----------|----------|---------------|-------------|
          | PHP | ${PHP_COVERAGE}% | ${PHP_LINES_COVERED} | ${PHP_LINES_TOTAL} |
          | JavaScript | ${JS_COVERAGE}% | ${JS_LINES_COVERED} | ${JS_LINES_TOTAL} |
          | **Total** | **${OVERALL_COVERAGE}%** | **${TOTAL_LINES_COVERED}** | **${TOTAL_LINES}** |
          
          ## Status
          $(if (( $(echo "${OVERALL_COVERAGE} >= ${{ env.MIN_COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "✅ **PASSED** - Coverage meets minimum threshold"
          else
            echo "❌ **FAILED** - Coverage below minimum threshold"
          fi)
          
          $(if (( $(echo "${OVERALL_COVERAGE} >= ${{ env.TARGET_COVERAGE }}" | bc -l) )); then
            echo "🎯 **TARGET MET** - Coverage meets target goal"
          else
            echo "🎯 **TARGET MISSED** - Coverage below target goal"
          fi)
          
          Generated: $(date '+%Y-%m-%d %H:%M:%S UTC')
          EOF
          
          echo "Overall coverage: ${OVERALL_COVERAGE}%"

      - name: 📤 Upload to Codecov
        if: github.event.inputs.upload_codecov != 'false'
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage-artifacts
          flags: combined
          name: woo-ai-assistant-coverage
          fail_ci_if_error: false
          verbose: true

      - name: 🏷️ Generate coverage badge
        if: github.event.inputs.generate_badge != 'false' && github.ref == 'refs/heads/main'
        run: |
          echo "🏷️ Generating coverage badge..."
          
          # Get overall coverage (simplified calculation)
          PHP_COVERAGE="${{ needs.php-coverage.outputs.php-coverage || '0' }}"
          JS_COVERAGE="${{ needs.javascript-coverage.outputs.js-coverage || '0' }}"
          
          # Simple average for badge (you might want to weight this differently)
          if [[ "$PHP_COVERAGE" != "0" && "$JS_COVERAGE" != "0" ]]; then
            BADGE_COVERAGE=$(echo "scale=0; ($PHP_COVERAGE + $JS_COVERAGE) / 2" | bc)
          elif [[ "$PHP_COVERAGE" != "0" ]]; then
            BADGE_COVERAGE="$PHP_COVERAGE"
          elif [[ "$JS_COVERAGE" != "0" ]]; then
            BADGE_COVERAGE="$JS_COVERAGE"
          else
            BADGE_COVERAGE="0"
          fi
          
          # Determine badge color
          if (( $(echo "$BADGE_COVERAGE >= 90" | bc -l) )); then
            BADGE_COLOR="brightgreen"
          elif (( $(echo "$BADGE_COVERAGE >= ${{ env.MIN_COVERAGE_THRESHOLD }}" | bc -l) )); then
            BADGE_COLOR="green"
          elif (( $(echo "$BADGE_COVERAGE >= 60" | bc -l) )); then
            BADGE_COLOR="yellow"
          else
            BADGE_COLOR="red"
          fi
          
          # Create badge URL
          BADGE_URL="https://img.shields.io/badge/coverage-${BADGE_COVERAGE}%25-${BADGE_COLOR}"
          
          echo "Badge URL: $BADGE_URL"
          echo "Badge coverage: ${BADGE_COVERAGE}%"

      - name: 📊 Add coverage to job summary
        run: |
          echo "## 📊 Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat combined-coverage-report.md >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload combined coverage report
        uses: actions/upload-artifact@v3
        with:
          name: combined-coverage-report
          path: |
            combined-coverage-report.md
            coverage-artifacts/
          retention-days: 90

      - name: ✅ Coverage success
        if: success()
        run: |
          echo "✅ Code coverage analysis completed successfully!"

      - name: ⚠️ Coverage warning
        if: failure()
        run: |
          echo "⚠️ Code coverage analysis completed with issues."
          echo "Check the coverage reports for details."

  # ==============================================================================
  # COVERAGE TREND ANALYSIS
  # ==============================================================================
  coverage-trend:
    name: 📈 Coverage Trend Analysis
    runs-on: ubuntu-latest
    needs: [coverage-reporting]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Track coverage trend
        run: |
          echo "📈 Tracking coverage trend..."
          
          # This is a placeholder for coverage trend tracking
          # You could implement:
          # - Store coverage data in a database
          # - Create historical coverage charts
          # - Compare with previous runs
          # - Send notifications on significant changes
          
          PHP_COVERAGE="${{ needs.php-coverage.outputs.php-coverage || '0' }}"
          JS_COVERAGE="${{ needs.javascript-coverage.outputs.js-coverage || '0' }}"
          
          echo "Current coverage levels:"
          echo "- PHP: ${PHP_COVERAGE}%"
          echo "- JavaScript: ${JS_COVERAGE}%"
          echo "- Date: $(date)"
          
          # Future: Store this data for trend analysis
          echo "✅ Coverage trend tracking completed"