# ====================================
# Woo AI Assistant - Development Environment Configuration
# ====================================
# Copy this file to .env and fill in your actual values
# NEVER commit .env file with real API keys to version control!

# ====================================
# DEVELOPMENT MODE
# ====================================
# Enable development mode (bypasses license validation, enables debug features)
WOO_AI_DEVELOPMENT_MODE=true

# Development license key (any value accepted in dev mode)
WOO_AI_DEVELOPMENT_LICENSE_KEY=dev-license-12345

# ====================================
# AI SERVICE API KEYS
# ====================================
# OpenRouter API Key (for Gemini models)
OPENROUTER_API_KEY=sk-or-v1-your-openrouter-key-here

# OpenAI API Key (for embeddings)
OPENAI_API_KEY=sk-your-openai-key-here

# Google API Key (alternative for Gemini direct access)
GOOGLE_API_KEY=your_google_key_here

# ====================================
# VECTOR DATABASE (Pinecone)
# ====================================
PINECONE_API_KEY=your-pinecone-api-key-here
PINECONE_ENVIRONMENT=gcp-starter
PINECONE_INDEX_NAME=woo-ai-assistant-dev
PINECONE_NAMESPACE=default
PINECONE_DIMENSION=1536

# ====================================
# STRIPE PAYMENT PROCESSING
# ====================================
# Test keys for development
STRIPE_SECRET_KEY=sk_test_your-stripe-test-secret-key
STRIPE_PUBLISHABLE_KEY=pk_test_your-stripe-test-publishable-key
STRIPE_WEBHOOK_SECRET=whsec_your-webhook-secret

# ====================================
# DEVELOPMENT SETTINGS
# ====================================
# Debug and logging
WOO_AI_DEBUG=true
WOO_AI_ASSISTANT_DEBUG=true
WOO_AI_ENHANCED_DEBUG=true
WOO_AI_ASSISTANT_LOG_LEVEL=debug
WOO_AI_DEBUG_QUERIES=true
WOO_AI_DEBUG_API_CALLS=true

# Performance settings
WOO_AI_CACHE_TTL=60
WOO_AI_ASSISTANT_CACHE_TTL=300
WOO_AI_ASSISTANT_DISABLE_CACHE=false
WOO_AI_DEV_API_TIMEOUT=30
WOO_AI_API_TIMEOUT=10
WOO_AI_DEV_CACHE_TTL=60
WOO_AI_DEV_MAX_ITEMS=10
WOO_AI_DEV_MAX_PRODUCTS=50

# Skip expensive operations in development
WOO_AI_SKIP_INDEXING=false
WOO_AI_SKIP_EMBEDDINGS=false

# Development features and mocking
WOO_AI_USE_DUMMY_DATA=false
WOO_AI_USE_DUMMY_EMBEDDINGS=false
WOO_AI_MOCK_API_CALLS=false
WOO_AI_USE_DUMMY_AI_RESPONSES=false

# Environment detection overrides
WOO_AI_FORCE_PRODUCTION_MODE=false
WOO_AI_DETECT_CLOUD_ENVIRONMENT=true
WOO_AI_DETECT_CI_ENVIRONMENT=true

# License bypass in development
WOO_AI_BYPASS_LICENSE_VALIDATION=true
WOO_AI_FORCE_LICENSE_VALIDATION=false

# ====================================
# AI MODEL CONFIGURATION
# ====================================
# Primary model for chat responses
WOO_AI_PRIMARY_MODEL=google/gemini-2.0-flash-exp:free
WOO_AI_FALLBACK_MODEL=google/gemini-2.0-flash-thinking-exp:free
WOO_AI_PREMIUM_MODEL=google/gemini-2.0-pro

# Embedding model
WOO_AI_EMBEDDING_MODEL=text-embedding-3-small

# Model parameters
WOO_AI_MAX_TOKENS=2000
WOO_AI_TEMPERATURE=0.7
WOO_AI_TOP_P=0.9
WOO_AI_FREQUENCY_PENALTY=0.0
WOO_AI_PRESENCE_PENALTY=0.0

# ====================================
# INTERMEDIATE SERVER CONFIGURATION
# ====================================
# Whether to use intermediate server in development (true/false)
WOO_AI_USE_INTERMEDIATE_SERVER=false

# Local development server URL (when running locally)
WOO_AI_DEVELOPMENT_SERVER_URL=http://localhost:3000
WOO_AI_ASSISTANT_API_URL=http://localhost:3000

# Production server URLs (for reference - automatically used in production)
# Primary production server
# WOO_AI_PRODUCTION_SERVER_URL=https://api.woo-ai-assistant.eu
# Backup servers for failover
# WOO_AI_BACKUP_SERVER_1=https://staging-api.woo-ai-assistant.eu
# WOO_AI_BACKUP_SERVER_2=https://backup-api.woo-ai-assistant.eu

# Server health check configuration
WOO_AI_SERVER_HEALTH_CHECK_INTERVAL=300
WOO_AI_SERVER_HEALTH_CHECK_TIMEOUT=10

# Failover configuration
WOO_AI_SERVER_FAILOVER_ENABLED=true
WOO_AI_SERVER_RETRY_ATTEMPTS=3
WOO_AI_SERVER_RETRY_DELAY=2

# ====================================
# MAMP CONFIGURATION
# ====================================
# Database settings
DB_HOST=localhost:8889
DB_NAME=wordpress
DB_USER=root
DB_PASSWORD=root
DB_PREFIX=wp_

# WordPress URLs
WP_HOME=http://localhost:8888/wp
WP_SITEURL=http://localhost:8888/wp

# ====================================
# WORDPRESS SETTINGS
# ====================================
# Enable WordPress debugging
WP_DEBUG=true
WP_DEBUG_LOG=true
WP_DEBUG_DISPLAY=false
SCRIPT_DEBUG=true
SAVEQUERIES=true

# ====================================
# TESTING CONFIGURATION
# ====================================
# Test database (separate from main DB)
TEST_DB_HOST=localhost:8889
TEST_DB_NAME=wordpress_test
TEST_DB_USER=root
TEST_DB_PASSWORD=root

# PHPUnit settings
PHPUNIT_COVERAGE_THRESHOLD=90
PHPUNIT_FAIL_ON_WARNING=true

# Jest settings
JEST_COVERAGE_THRESHOLD=80

# Test user credentials
TEST_USER_EMAIL=test@example.com
TEST_USER_PASSWORD=test123
TEST_ADMIN_EMAIL=admin@example.com
TEST_ADMIN_PASSWORD=admin123

# Test data generation
GENERATE_TEST_PRODUCTS=true
TEST_PRODUCTS_COUNT=50
GENERATE_TEST_ORDERS=true
TEST_ORDERS_COUNT=100

# ====================================
# FEATURE FLAGS
# ====================================
# Enable/disable specific features for testing
FEATURE_COUPON_GENERATION=true
FEATURE_PROACTIVE_TRIGGERS=true
FEATURE_HUMAN_HANDOFF=true
FEATURE_VECTOR_SEARCH=true
FEATURE_STREAMING_RESPONSES=true
FEATURE_ADVANCED_ANALYTICS=true
FEATURE_MULTILINGUAL_SUPPORT=true
FEATURE_CUSTOM_INTEGRATIONS=true

# ====================================
# ADDITIONAL AI SERVICES
# ====================================
# Anthropic (Claude) API Key
ANTHROPIC_API_KEY=sk-ant-your-anthropic-key-here

# Hugging Face API Key
HUGGINGFACE_API_KEY=hf_your-hugging-face-key-here

# Cohere API Key (alternative embedding provider)
COHERE_API_KEY=your-cohere-api-key-here

# Azure OpenAI (enterprise alternative)
AZURE_OPENAI_API_KEY=your-azure-openai-key-here
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_OPENAI_DEPLOYMENT_NAME=your-deployment-name

# ====================================
# RATE LIMITING (Development)
# ====================================
# API rate limits (requests per minute)
WOO_AI_RATE_LIMIT_ENABLED=false
WOO_AI_MAX_REQUESTS_PER_MINUTE=60
WOO_AI_MAX_REQUESTS_PER_HOUR=1000
RATE_LIMIT_OPENAI=60
RATE_LIMIT_OPENROUTER=60
RATE_LIMIT_PINECONE=100

# ====================================
# MONITORING & ANALYTICS
# ====================================
# Error tracking (optional)
SENTRY_DSN=
SENTRY_ENVIRONMENT=development

# Analytics (optional)
GA_TRACKING_ID=
MIXPANEL_TOKEN=

# ====================================
# DOCKER CONFIGURATION (Optional)
# ====================================
# If using Docker for development
DOCKER_WP_PORT=8080
DOCKER_DB_PORT=3306
DOCKER_PHPMYADMIN_PORT=8081
DOCKER_MAILHOG_PORT=8025
DOCKER_REDIS_PORT=6379

# Docker compose project name
COMPOSE_PROJECT_NAME=woo-ai-assistant
DOCKER_COMPOSE_PROJECT_NAME=woo-ai-assistant

# ====================================
# ADVANCED CONFIGURATION
# ====================================
# API Configuration Caching
WOO_AI_CONFIG_CACHE_ENABLED=true
WOO_AI_CONFIG_CACHE_TTL=1800

# Configuration validation
WOO_AI_VALIDATE_CONFIG_ON_STARTUP=true
WOO_AI_STRICT_API_KEY_VALIDATION=false

# Environment-specific overrides
WOO_AI_MAX_TOKENS_OVERRIDE=
WOO_AI_TEMPERATURE_OVERRIDE=
WOO_AI_API_TIMEOUT_OVERRIDE=

# Development server configuration
WOO_AI_DEV_SERVER_HOST=localhost
WOO_AI_DEV_SERVER_PORT=3000
WOO_AI_DEV_SERVER_PROTOCOL=http

# SSL/TLS Configuration for development
WOO_AI_SKIP_SSL_VERIFICATION=true
WOO_AI_SSL_CERT_PATH=
WOO_AI_SSL_KEY_PATH=

# Request/Response logging
WOO_AI_LOG_API_REQUESTS=true
WOO_AI_LOG_API_RESPONSES=true
WOO_AI_LOG_REQUEST_HEADERS=false
WOO_AI_LOG_RESPONSE_HEADERS=false

# Security settings
WOO_AI_ENABLE_REQUEST_SIGNING=true
WOO_AI_REQUEST_SIGNATURE_ALGORITHM=sha256
WOO_AI_CORS_ENABLED=false
WOO_AI_CORS_ALLOWED_ORIGINS=*

# ====================================
# ENVIRONMENT DETECTION SETTINGS
# ====================================
# Custom environment detection rules
WOO_AI_CUSTOM_DEV_INDICATORS=mydev.local,dev-site.com
WOO_AI_CUSTOM_DEV_PORTS=3000,3001,4000,4001
WOO_AI_CUSTOM_CI_INDICATORS=MY_CI_ENV,CUSTOM_BUILD_ID

# Cloud platform detection
WOO_AI_DETECT_AWS=true
WOO_AI_DETECT_GCP=true
WOO_AI_DETECT_AZURE=true
WOO_AI_DETECT_HEROKU=true
WOO_AI_DETECT_VERCEL=true
WOO_AI_DETECT_NETLIFY=true

# ====================================
# BACKWARD COMPATIBILITY
# ====================================
# Legacy environment variables (for older configurations)
AI_ASSISTANT_DEBUG=
WOO_AI_LEGACY_MODE=false
WOO_AI_MIGRATE_OLD_CONFIG=true

# ====================================
# VALIDATION AND TROUBLESHOOTING
# ====================================
# Configuration validation commands:
# php -r "require 'vendor/autoload.php'; use WooAiAssistant\Config\DevelopmentConfig; \$config = DevelopmentConfig::getInstance(); var_dump(\$config->validateDevelopmentConfiguration());"

# Environment detection test:
# php -r "require 'vendor/autoload.php'; use WooAiAssistant\Config\DevelopmentConfig; \$config = DevelopmentConfig::getInstance(); var_dump(\$config->getEnvironmentDetectionResults());"

# API configuration test:
# php -r "require 'vendor/autoload.php'; use WooAiAssistant\Config\ApiConfiguration; \$config = ApiConfiguration::getInstance(); var_dump(\$config->getSafeConfiguration());"

# Server connectivity test:
# php -r "require 'vendor/autoload.php'; use WooAiAssistant\Config\ApiConfiguration; \$config = ApiConfiguration::getInstance(); var_dump(\$config->getAllServerStatus());"

# ====================================
# NOTES AND BEST PRACTICES
# ====================================
# 1. This file is a template. Copy to .env and fill with actual values
# 2. Never commit .env file with real API keys to version control
# 3. All API keys should be test/development keys only
# 4. Production uses license key system, not direct API keys
# 5. Use WOO_AI_DEVELOPMENT_MODE=true to ensure development mode
# 6. Set WOO_AI_USE_INTERMEDIATE_SERVER=false for direct API calls in dev
# 7. Enable logging with WOO_AI_DEBUG=true and WOO_AI_ENHANCED_DEBUG=true
# 8. Test your configuration with the validation commands above
# 9. See CLAUDE.md for detailed development guidelines
# 10. Check server connectivity before running tests or development

# ====================================
# QUICK START COMMANDS
# ====================================
# Copy this file:
# cp .env.example .env

# Validate your configuration:
# composer run validate-config

# Run development setup:
# composer run dev-setup

# Start development server (if using Docker):
# docker-compose up -d

# Run quality gates:
# composer run quality-gates-enforce