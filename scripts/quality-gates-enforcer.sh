#!/bin/bash

# quality-gates-enforcer.sh - Main quality gates verification script
# This script MUST pass before ANY task can be marked as completed

PHASE=${1:-0}
TOTAL_ERRORS=0
STATUS_FILE=".quality-gates-status"

echo "üö® QUALITY GATES ENFORCEMENT - Phase $PHASE"
echo "==========================================="
echo ""
echo "‚ö†Ô∏è  CRITICAL: Task completion is FORBIDDEN until ALL gates pass!"
echo ""

# Function to run a check and track errors
run_check() {
    local check_name=$1
    local check_command=$2
    
    echo "üîç Running: $check_name"
    
    if eval $check_command; then
        echo "  ‚úÖ PASSED"
        return 0
    else
        echo "  ‚ùå FAILED"
        return 1
    fi
}

# Phase 0 Quality Gates
if [ $PHASE -ge 0 ]; then
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üì¶ PHASE 0 - Foundation Quality Gates"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    # Check configuration files exist
    run_check "Configuration Files" "[ -f composer.json ] && [ -f package.json ] && [ -f phpunit.xml ]"
    [ $? -ne 0 ] && TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
    
    # Check directory structure
    run_check "Directory Structure" "[ -d scripts ]"
    [ $? -ne 0 ] && TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
    
    # Verify path structure
    run_check "Path Verification" "bash scripts/verify-paths.sh 0 >/dev/null 2>&1"
    [ $? -ne 0 ] && TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
    
    # NEW: Plugin Activation Test
    run_check "Plugin Activation Test" "php scripts/test-plugin-activation.php >/dev/null 2>&1"
    [ $? -ne 0 ] && TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
    
    echo ""
fi

# Phase 1 Quality Gates
if [ $PHASE -ge 1 ]; then
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üèóÔ∏è PHASE 1 - Core Infrastructure Gates"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    # Check PHP files exist
    run_check "Core PHP Files" "[ -f src/Main.php ]"
    [ $? -ne 0 ] && TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
    
    # Check PHP standards
    run_check "PHP Standards" "php scripts/verify-standards.php 1 >/dev/null 2>&1"
    [ $? -ne 0 ] && TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
    
    # Run PHPUnit tests if available
    if [ -f vendor/bin/phpunit ]; then
        run_check "PHPUnit Tests" "vendor/bin/phpunit --group phase1 >/dev/null 2>&1"
        [ $? -ne 0 ] && TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
    fi
    
    echo ""
fi

# Phase 2+ Quality Gates
if [ $PHASE -ge 2 ]; then
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üß† PHASE $PHASE - Advanced Quality Gates"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    # Check code coverage
    if [ -f vendor/bin/phpunit ]; then
        echo "üìä Checking code coverage..."
        
        # Get minimum coverage for phase
        case $PHASE in
            2) MIN_COVERAGE=70 ;;
            3) MIN_COVERAGE=75 ;;
            4) MIN_COVERAGE=80 ;;
            5) MIN_COVERAGE=85 ;;
            *) MIN_COVERAGE=90 ;;
        esac
        
        echo "  Minimum required: ${MIN_COVERAGE}%"
        # Note: Actual coverage check would be here
        echo "  ‚ö†Ô∏è  Coverage check skipped (no code to test yet)"
    fi
    
    echo ""
fi

# Additional checks for all phases
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üîß General Quality Checks"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

# Check for debugging code (exclude legitimate logging functions)
echo "üîç Checking for debug code..."
if grep -r "var_dump\|console\.log" src/ widget-src/ 2>/dev/null | grep -v "test\|Test\|debugLog\|Logger" > /dev/null; then
    echo "  ‚ùå Found debug code in source files"
    TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
else
    echo "  ‚úÖ No debug code found"
fi

# Check for TODO comments
echo "üîç Checking for unresolved TODOs..."
TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX" src/ widget-src/ 2>/dev/null | wc -l)
if [ $TODO_COUNT -gt 0 ]; then
    echo "  ‚ö†Ô∏è  Found $TODO_COUNT TODO/FIXME comments"
    # Only count as error for phases > 0 (Phase 0 can have placeholder TODOs)
    if [ $PHASE -gt 0 ]; then
        TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
    fi
else
    echo "  ‚úÖ No TODO comments found"
fi

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üìä QUALITY GATES SUMMARY"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

# Write status file
if [ $TOTAL_ERRORS -eq 0 ]; then
    echo "QUALITY_GATES_STATUS=PASSED" > $STATUS_FILE
    echo "PHASE=$PHASE" >> $STATUS_FILE
    echo "TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')" >> $STATUS_FILE
    echo "ERRORS=0" >> $STATUS_FILE
    
    echo "‚úÖ‚úÖ‚úÖ ALL QUALITY GATES PASSED! ‚úÖ‚úÖ‚úÖ"
    echo ""
    echo "Task completion is now ALLOWED for Phase $PHASE"
    echo "Status file created: $STATUS_FILE"
    exit 0
else
    echo "QUALITY_GATES_STATUS=FAILED" > $STATUS_FILE
    echo "PHASE=$PHASE" >> $STATUS_FILE
    echo "TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')" >> $STATUS_FILE
    echo "ERRORS=$TOTAL_ERRORS" >> $STATUS_FILE
    
    echo "‚ùå‚ùå‚ùå QUALITY GATES FAILED! ‚ùå‚ùå‚ùå"
    echo ""
    echo "Found $TOTAL_ERRORS critical issues that MUST be fixed"
    echo "Task completion is BLOCKED until all gates pass"
    echo ""
    echo "‚ö†Ô∏è  ENFORCEMENT: Task CANNOT be marked as completed!"
    echo "‚ö†Ô∏è  Fix all issues and run this script again."
    exit 1
fi